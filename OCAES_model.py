from pyomo.environ import *
import OCAES_rules as rules
from CoolProp.CoolProp import PropsSI
import os
import pandas as pd


# def create_model():
# ================================
# import data
# ================================
work_dir = os.getcwd()
os.chdir("data")

# power generated by one 5.5 MW wind turbine
E_WT = pd.read_csv("wind_power_5MW")

# grid price of electricity
grid_price = pd.read_csv("COE.csv")

# grid emissions
grid_emi = pd.read_csv("emissions.csv")

# other data
# data = pd.read_csv("data.csv")

os.chdir(work_dir)

# ================================
# process data
# ================================

# financing
R = 0.05  # discount rate (%)
L = 25  # lifetime (years)

# Wind farm
X_WIND = 600  # capacity (MW)
C_WIND = 4444.0*1000.0  # capital cost ($/kW) to ($/MW)
F_WIND = 129.0*1000.0  # fixed O&M cost ($/kW-y) to ($/MW-y)
V_WIND = 30.3*1000.0  # variable O&M cost ($/kWh) to ($/MWh) # TODO check values

# OCAES costs
C_WELL = 15.0*1E6 # capital cost (million pounds) to ($)
C_MACHINE = 953000.0 # capital cost to ($/MW) # TODO add intercept, 953000 MW + 57400
F_OCAES = 11*1000.0  # fixed O&M cost ($/kW-y) to ($/MW-y)
V_OCAES = 3.0  # variable O&M cost ($/MWh)

# OCAES performance
M_DOT_WELL = 15.0  # maximum well flow rate (kg/s)
M_RES0 = 0.0  # initial reservoir storage level (kg)
eta_CMP = 0.9  # compressor efficiency (fraction)
eta_EXP = 0.9  # expander efficieny (fraction)

# pressure/temperature conditions
T_amb = 25.0 + 273.15  # ambient temperature (deg C to K)
P_amb = 101325.0  # ambient pressure (Pa)
P_res = 250.0 * 1E5  # reservoir pressure (bar to Pa)

# time steps
delta_t = 1  # (1 hour)
T = 8760  # number of hours

# ================================
# Pre-calculations
# ================================
# Enthalpy change during expansion/compression
H_amb = PropsSI('H', 'T', T_amb, 'P', P_amb, 'Air')  # J/kg
H_res = PropsSI('H', 'T', T_amb, 'P', P_res, 'Air')  # J/kg
delta_H = (H_res - H_amb) * 2.78E-10  # convert from J/kg to MWh/kg

# Scale power production from a single 5 MW turbine to the capacity of the wind farm
E_WIND = E_WT.values * X_WIND / 5.0

# capital charging rate
CCR = R * (1 + R) ** L / ((1 + R) ** L - 1)

# well maximum flow rate
M_WELL = M_DOT_WELL * 3600 * delta_t  # (kg/s to kg per time step)

# ================================
# Create Pyomo model
# ================================
model = AbstractModel()
# ----------------
# Sets (fixed)
# ----------------
model.t = Set(initialize=range(1, T + 1))

# ----------------
# Parameters (fixed inputs)
# ----------------
model.E_WIND = Param(model.t, initialize=E_WIND)  # Wind power generated by farm
model.P = Param(model.t, initialize=grid_price.values)  # grid price of electricity
model.delta_t = Param(initialize=delta_t)
model.delta_H = Param(initialize=delta_H)
model.M_WELL = Param(initialize=M_WELL)
model.M_RES0 = Param(initialize=M_RES0)
model.eta_CMP = Param(initialize=eta_CMP)
model.eta_EXP = Param(initialize=eta_EXP)

model.X_WIND = Param(initialize=X_WIND)
model.C_WIND = Param(initialize=C_WIND)
model.F_WIND = Param(initialize=F_WIND)
model.V_WIND = Param(initialize=V_WIND)
model.C_WELL = Param(initialize=C_WELL)
model.C_MACHINE = Param(initialize=C_MACHINE)
model.F_OCAES = Param(initialize=F_OCAES)
model.V_OCAES = Param(initialize=V_OCAES)
model.CCR = Param(initialize=CCR)

# ----------------
# Variables (upper case)
# ----------------
# Decision variables - OCAES system
model.N_WELLS = Var(within=NonNegativeIntegers)  # Number of wells (>0, integer)
model.X_OCAES = Var(within=NonNegativeReals)  # The machinery rating (>0, MW)

# Energy flows
model.E_CMP = Var(model.t, within=NonNegativeReals)  # OCAES compressor (>0, MWh)
model.E_EXP = Var(model.t, within=NonNegativeReals)  # OCAES expander (>0, MWh)
model.E_CURTAIL = Var(model.t, within=NonNegativeReals)  # Curtailed energy (>0, MWh)
model.E_GRID = Var(model.t, within=NonNegativeReals)  # Grid delivered (>0, MWh)

# Air stored
model.M_RES = Var(model.t, within=NonNegativeReals)  # within reservoir (>0, kg)
model.M_CMP = Var(model.t, within=NonNegativeReals)  # from compressor (>0, kg)
model.M_EXP = Var(model.t, within=NonNegativeReals)  # to expander (>0, kg)

# Economics
model.REVENUE = Var(model.t)  # within reservoir (>0, $)
model.COSTS = Var(model.t)  # from compressor (>0, $)
model.PROFIT = Var(model.t)  # to expander (>0, $)

# ----------------
# Constraints (lower case)
# ----------------
model.energy_balance = Constraint(model.t, rule=rules.energy_balance)  # Hourly energy balance
model.capacity_cmp = Constraint(model.t, rule=rules.capacity_cmp)  # Compressor capacity limit
model.capacity_exp = Constraint(model.t, rule=rules.capacity_exp)  # Expander capacity limit

model.mass_balance = Constraint(model.t, rule=rules.mass_balance)  # Hourly mass balance
model.reservoir_mass_limit = Constraint(model.t, rule=rules.reservoir_mass_limit)  # Reservoir mass limit

model.work_cmp = Constraint(model.t, rule=rules.work_cmp)  # Compressor work (per time step)
model.work_exp = Constraint(model.t, rule=rules.work_exp)  # Expander work (per time step)

model.revenue = Constraint(model.t, rule=rules.revenue)  # Total revenue
model.costs = Constraint(model.t, rule=rules.costs)  # Total costs
model.profit = Constraint(model.t, rule=rules.profit)  # Profit

# ----------------
# Objective
# ----------------
model.OBJ = Objective(sense=minimize, rule=rules.objective)

# return model
