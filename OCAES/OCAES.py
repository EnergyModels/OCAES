import pandas as pd
from pyomo.environ import *
from OCAES import OCAES_rules as rules


class ocaes:
    def get_default_inputs():
        attributes = ['debug', 'delta_t',
                      'X_wind', 'X_well', 'X_cmp', 'X_exp',
                      'pwr2energy', 'eta_storage',
                      'C_wind', 'C_well', 'C_cmp', 'C_exp',
                      'V_wind', 'V_cmp', 'V_exp',
                      'F_wind', 'F_well', 'F_cmp', 'F_exp',
                      'wt_cutin', 'wt_rated', 'wt_cutout',
                      'wt_A', 'wt_B', 'wt_C', 'wt_D']
        inputs = pd.Series(index=attributes)

        inputs['debug'] = False  # debug
        inputs['delta_t'] = 1  # [hr]

        # Power capacity [MW]
        inputs['X_wind'] = 500.0  # wind farm
        inputs['X_well'] = 500.0  # well
        inputs['X_cmp'] = 500.0  # compressor
        inputs['X_exp'] = 500.0  # expander

        # Storage performance
        inputs['pwr2energy'] = 5.0  # relation between power and energy [-]
        inputs['eta_storage'] = 0.75  # round trip efficiency [-]
        inputs['initial_storage_fr'] = 0.5  # initial storage level, fraction of max [-]

        # Capital costs [$/MW]
        inputs['C_wind'] = 298.15
        inputs['C_well'] = 298.15
        inputs['C_cmp'] = 298.15
        inputs['C_exp'] = 298.15

        # Variable costs [$/MWh]
        inputs['V_wind'] = 10.0e3
        inputs['V_cmp'] = 0.0
        inputs['V_exp'] = 0.0

        # Fixed costs [$/MW-y]
        inputs['F_wind'] = 10.0e3
        inputs['F_well'] = 0.0
        inputs['F_cmp'] = 0.0
        inputs['F_exp'] = 0.0

        # wind farm performance characteristics
        inputs['wt_cutin'] = 3.16  # Cut-in wind speed [m/s]
        inputs['wt_rated'] = 11.42  # Rated wind speed [m/s]
        inputs['wt_cutout'] = 25.0  # Cut-out wind speed [m/s]

        # wind farm power curve Ax^3 + Bx^2 + Cx + D, Based on NREL 5MW wind turbine
        # outputs should be 0 to 1 in range of wt_cutin to wt_rated
        inputs['wt_A'] = 0.0003659862  # A
        inputs['wt_B'] = 0.006094302  # B
        inputs['wt_C'] = -0.0337523  # C
        inputs['wt_D'] = 0.05317015  # D

        return inputs

    def __init__(self, data, inputs=get_default_inputs()):
        # store data and inputs
        self.data = data
        self.inputs = inputs
        self.results = []

        # ================================
        # Calculate wind power generated (fraction of rated)
        # wind farm power curve Ax^3 + Bx^2 + Cx + D (min = 0.0, max = 1.0
        # ================================
        data.loc[:, 'P_wind_MW'] = 0.0
        data.P_wind_MW = inputs['wt_A'] * data.windspeed_ms ** 3 + inputs['wt_B'] * data.windspeed_ms ** 2 + inputs[
            'wt_C'] * data.windspeed_ms + inputs['wt_D']
        data.loc[data.windspeed_ms < inputs['wt_cutin'], 'P_wind_MW'] = 0.0  # Cut-in
        data.loc[data.windspeed_ms >= inputs['wt_rated'], 'P_wind_MW'] = 1.0  # Rated
        data.loc[data.windspeed_ms >= inputs['wt_cutout'], 'P_wind_MW'] = 0.0  # cut-out

        # ================================
        # Process data
        # Move time series data to dictionaries to be compatible with pyomo indexed format
        # ================================
        T = len(data) + 1  # number of time steps
        P_wind_dict = {i: data.P_wind_MW[i - 1] for i in range(1, T)}  # wind power (fraction of capacity)
        price_dict = {i: data.price_dollarsPerMWh[i - 1] for i in range(1, T)}  # electricity price in $/MWh
        emissions_dict = {i: data.emissions_tonCO2PerMWh[i - 1] for i in range(1, T)}  # emissions [ton/MWh]

        # ================================
        # Create Pyomo model
        # ================================
        model = AbstractModel()
        # ----------------
        # Sets (fixed)
        # ----------------
        model.t = Set(initialize=range(1, T))

        # ----------------
        # Parameters (fixed inputs)
        # ----------------
        # calculated inputs based on data
        model.P_wind = Param(model.t, initialize=P_wind_dict)  # Wind power generated by farm
        model.price_grid = Param(model.t,
                                 initialize=price_dict)  # Grid locational marginal price (LMP) of electricity by hour
        model.emissions_grid = Param(model.t, initialize=emissions_dict)  # Grid emissions by hour

        # general
        model.delta_t = Param(initialize=inputs['delta_t'])  # time step [hr]
        model.T = Param(initialize=T)  # number of time steps

        # power capacity [MW]
        model.X_wind = Param(initialize=inputs['X_wind'])
        model.X_well = Param(initialize=inputs['X_well'])
        model.X_cmp = Param(initialize=inputs['X_cmp'])
        model.X_exp = Param(initialize=inputs['X_exp'])

        # storage performance
        model.E_well_max = Param(initialize=inputs['X_well'] * inputs['pwr2energy'])  # maximum energy storage [MWh]
        model.E_well_init = Param(initialize=inputs['initial_storage_fr'] * inputs['X_well'] * inputs[
            'pwr2energy'])  # Initial (and final) energy storage level [-]
        model.eta_storage_roundtrip = Param(initialize=inputs['eta_storage'])  # Storage round trip efficiency [-]
        model.eta_storage_single = Param(
            initialize=inputs['eta_storage'] ** 0.5)  # Storage single direction efficiency [-]

        # capital costs [$/MW]
        model.C_wind = Param(initialize=inputs['C_wind'])
        model.C_well = Param(initialize=inputs['C_well'])
        model.C_cmp = Param(initialize=inputs['C_cmp'])
        model.C_exp = Param(initialize=inputs['C_exp'])

        # variable costs [$/MWh]
        model.V_wind = Param(initialize=inputs['V_wind'])
        model.V_cmp = Param(initialize=inputs['V_cmp'])
        model.V_exp = Param(initialize=inputs['V_exp'])

        # fixed costs [$/MW-y]
        model.F_wind = Param(initialize=inputs['F_wind'])
        model.F_well = Param(initialize=inputs['F_well'])
        model.F_cmp = Param(initialize=inputs['F_cmp'])
        model.F_exp = Param(initialize=inputs['F_exp'])

        # interest rate calculation factor
        model.CCR = Param(initialize=0.1)  # TODO

        # ----------------
        # Variables (upper case)
        # ----------------
        # Decision variables - energy flows
        model.P_cmp = Var(model.t, within=NonNegativeReals, initialize=0.0)  # OCAES compressor power in (>0, MW)
        model.P_exp = Var(model.t, within=NonNegativeReals, initialize=0.0)  # OCAES expander power out (>0, MW)
        model.P_curtail = Var(model.t, within=NonNegativeReals, initialize=0.0)  # Curtailed power (>0, MW)
        model.P_grid = Var(model.t, within=NonNegativeReals, initialize=0.0)  # Power sold to the grid (>0, MW)

        # Energy stored
        model.E_well = Var(model.t, within=NonNegativeReals, initialize=0.0)  # OCAES compressor power in (>0, MW)

        # Economics
        model.revenue = Var(within=Reals, initialize=0.0)
        model.costs = Var(within=Reals, initialize=0.0)
        model.profit = Var(within=Reals, initialize=0.0)

        # Avoided emissions
        model.avoided_emissions = Var(within=Reals, initialize=0.0)  # within reservoir (>0, $)

        # ----------------
        # Constraints (prefixed with cnst)
        # ----------------
        # capacity - power
        model.cnst_pwr_capacity_cmp = Constraint(model.t, rule=rules.pwr_capacity_cmp)
        model.cnst_pwr_capacity_exp = Constraint(model.t, rule=rules.pwr_capacity_cmp)
        model.cnst_pwr_capacity_well_in = Constraint(model.t, rule=rules.pwr_capacity_well_in)
        model.cnst_pwr_capacity_well_out = Constraint(model.t, rule=rules.pwr_capacity_well_out)

        # capacity - energy
        model.cnst_energy_capacity_well_min = Constraint(model.t, rule=rules.energy_capacity_well_min)
        model.cnst_energy_capacity_well_max = Constraint(model.t, rule=rules.energy_capacity_well_max)

        # power balance
        model.cnst_power_balance = Constraint(model.t, rule=rules.power_balance)

        # energy stored
        model.cnst_energy_stored = Constraint(model.t, rule=rules.energy_stored)
        model.cnst_energy_stored_final = Constraint(rule=rules.energy_stored_final)

        # emissions
        model.cnst_emissions = Constraint(rule=rules.emissions)

        # economics
        model.cnst_revenue = Constraint(rule=rules.revenue)
        model.cnst_costs_cnst = Constraint(rule=rules.costs)
        model.cnst_profit_cnst = Constraint(rule=rules.profit)

        # ----------------
        # Objective
        # ----------------
        model.objective = Objective(sense=maximize, rule=rules.objective)

        # ----------------
        # Run
        # ----------------

        # create instance
        instance = model.create_instance(report_timing=True)
        instance.preprocess()

        # solve
        opt = SolverFactory("cplex")
        results = opt.solve(instance)
        print("Solver status               : " + str(results.solver.status))
        print("Solver termination condition: " + str(results.solver.termination_condition))
        print(results)

        # Store model, instance and results
        self.model = model
        self.instance = instance
        self.results = results

    def get_full_results(self):

        # add the following to your python script
        DF = pd.DataFrame()
        for v in self.model.component_objects(Var, active=True):
            for index in v:
                DF.at[index, v.name] = value(v[index])

        # cols = ['P_wind','P_cmp','P_exp','P_curtail','P_grid']
        # df = pd.DataFrame(columns=cols)
        # df.P_wind = value(self.instance.P_wind)
        # df.P_cmp = value(self.instance.P_cmp)
        # df.P_exp = value(self.instance.P_exp)
        # df.P_curtail = value(self.instance.P_curtail)
        # df.P_grid = value(self.instance.P_grid)

        return DF

