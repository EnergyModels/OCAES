import pandas as pd
from pyomo.environ import *
from OCAES import OCAES_rules as rules

class ocaes:
    def get_default_inputs():
        attributes = ['debug', 'delta_t',
                      'X_wind', 'X_well', 'X_cmp', 'X_exp',
                      'pwr2energy', 'eta_storage',
                      'C_wind', 'C_well', 'C_cmp', 'C_exp',
                      'V_wind', 'V_cmp', 'V_exp',
                      'F_wind', 'F_well', 'F_cmp', 'F_exp',
                      'wt_cutin', 'wt_rated', 'wt_cutout',
                      'wt_A', 'wt_B', 'wt_C', 'wt_D']
        inputs = pd.Series(index=attributes)

        inputs['debug'] = False  # debug
        inputs['delta_t'] = 1  # [hr]

        # Power capacity [MW]
        inputs['X_wind'] = 500.0  # wind farm
        inputs['X_well'] = 500.0  # well
        inputs['X_cmp'] = 500.0  # compressor
        inputs['X_exp'] = 500.0  # expander

        # Storage performance
        inputs['pwr2energy'] = 5.0  # relation between power and energy [-]
        inputs['eta_storage'] = 0.75  # round trip efficiency [-]

        # Capital costs [$/MW]
        inputs['C_wind'] = 298.15
        inputs['C_well'] = 298.15
        inputs['C_cmp'] = 298.15
        inputs['C_exp'] = 298.15

        # Variable costs [$/MWh]
        inputs['V_wind'] = 10.0e3
        inputs['V_cmp'] = 0.0
        inputs['V_exp'] = 0.0

        # Fixed costs [$/MW-y]
        inputs['F_wind'] = 10.0e3
        inputs['F_well'] = 0.0
        inputs['F_cmp'] = 0.0
        inputs['F_exp'] = 0.0

        # wind farm performance characteristics
        inputs['wt_cutin'] = 3.16  # Cut-in wind speed [m/s]
        inputs['wt_rated'] = 11.42  # Rated wind speed [m/s]
        inputs['wt_cutout'] = 25.0  # Cut-out wind speed [m/s]

        # wind farm power curve Ax^3 + Bx^2 + Cx + D, Based on NREL 5MW wind turbine
        # outputs should be 0 to 1 in range of wt_cutin to wt_rated
        inputs['wt_A'] = 0.0003659862  # A
        inputs['wt_B'] = 0.006094302  # B
        inputs['wt_C'] = -0.0337523  # C
        inputs['wt_D'] = 0.05317015  # D

        return inputs

    def _init__(self, data, inputs=get_default_inputs()):
        # store data and inputs
        self.data = data
        self.inputs = inputs

        # ================================
        # Process data
        # ================================
        T = 1
        P_wind_dict = 1
        LMP_grid_dict = 1
        Q_grid_dict = 1

        # ================================
        # Calculate wind power generated
        # ================================

        # wind farm performance characteristics
        inputs['wt_cutin'] = 3.16  # Cut-in wind speed [m/s]
        inputs['wt_rated'] = 11.42  # Rated wind speed [m/s]
        inputs['wt_cutout'] = 25.0  # Cut-out wind speed [m/s]

        # wind farm power curve Ax^3 + Bx^2 + Cx + D, Based on NREL 5MW wind turbine
        inputs['wt_A'] = 0.0003659862  # A
        inputs['wt_B'] = 0.006094302  # B
        inputs['wt_C'] = -0.0337523  # C
        inputs['wt_D'] = 0.05317015  # D

        # ================================
        # Create Pyomo model
        # ================================
        model = AbstractModel()
        # ----------------
        # Sets (fixed)
        # ----------------
        model.t = Set(initialize=range(1, T + 1))

        # ----------------
        # Parameters (fixed inputs)
        # ----------------
        # calculated inputs based on data
        model.P_wind = Param(model.t, initialize=P_wind_dict)  # Wind power generated by farm
        model.LMP_grid = Param(model.t,
                               initialize=LMP_grid_dict)  # Grid locational marginal price (LMP) of electricity by hour
        model.Q_grid = Param(model.t, initialize=Q_grid_dict)  # Grid emissions by hour

        # general
        model.delta_t = Param(initialize=inputs['delta_t'])  # time step [hr]

        # power capacity [MW]
        model.X_wind = Param(initialize=inputs['X_wind'])
        model.X_well = Param(initialize=inputs['X_well'])
        model.X_cmp = Param(initialize=inputs['X_cmp'])
        model.X_exp = Param(initialize=inputs['X_exp'])

        # storage performance
        model.E_well_max = Param(initialize=inputs['X_well'] * inputs['pwr2energy'])  # maximum energy storage [MWh]
        model.eta_storage = Param(initialize=inputs['eta_storage'])  # Storage round trip efficiency [-]

        # capital costs [$/MW]
        model.C_wind = Param(initialize=inputs['C_wind'])
        model.C_well = Param(initialize=inputs['C_well'])
        model.C_cmp = Param(initialize=inputs['C_cmp'])
        model.C_exp = Param(initialize=inputs['C_exp'])

        # variable costs [$/MWh]
        model.V_wind = Param(initialize=inputs['V_wind'])
        model.V_cmp = Param(initialize=inputs['V_cmp'])
        model.V_exp = Param(initialize=inputs['V_exp'])

        # fixed costs [$/MW-y]
        model.F_wind = Param(initialize=inputs['F_wind'])
        model.F_well = Param(initialize=inputs['F_well'])
        model.F_cmp = Param(initialize=inputs['F_cmp'])
        model.F_exp = Param(initialize=inputs['F_exp'])

        # ----------------
        # Variables (upper case)
        # ----------------
        # Decision variables - energy flows
        model.P_cmp = Var(model.t, within=NonNegativeReals, initialize=0.0)  # OCAES compressor power in (>0, MW)
        model.P_exp = Var(model.t, within=NonNegativeReals, initialize=0.0)  # OCAES expander power out (>0, MW)
        model.P_curtail = Var(model.t, within=NonNegativeReals, initialize=0.0)  # Curtailed power (>0, MW)
        model.P_grid = Var(model.t, within=NonNegativeReals, initialize=0.0)  # Power sold to the grid (>0, MW)

        # Energy stored

        # Economics
        # model.REVENUE = Var(within=Reals, initialize=0.0)  # within reservoir (>0, $)
        model.COSTS = Var(within=Reals, initialize=0.0)  # from compressor (>0, $)

        # Avoided emissions
        model.avoided_emisions

        # ----------------
        # Constraints (lower case)
        # ----------------
