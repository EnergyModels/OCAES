from pyomo.environ import *
import matplotlib.pyplot as plt

# import OCAES_rules as rules
# from CoolProp.CoolProp import PropsSI
import os
import pandas as pd


def objective(model):  # Objective - maximize revenue
    return model.REVENUE


def energy_balance(model, t):
    return model.E_WIND[t] == model.E_CURTAIL[t] + model.E_GRID[t]


def power_balance(model, t):
    return model.E_GRID[t] <= 500


def revenue(model):
    return model.REVENUE == sum(model.E_GRID[t] * model.P[t] for t in model.t)


# ================================
# import data
# ================================
work_dir = os.getcwd()
os.chdir("data")

# power generated by one 5 MW wind turbine
E_WT = pd.read_csv("wind_power_5MW.csv")

if E_WT.isnull().values.any():
    print "Remove null values from wind_power_5MW.csv"
    exit()

# grid price of electricity
grid_price = pd.read_csv("COE.csv")

if grid_price.isnull().values.any():
    print "Remove null values from COE.csv"
    exit()

os.chdir(work_dir)

# ================================
# process data
# ================================

# Wind farm
X_WIND = 600  # capacity (MW)

# time steps
delta_t = 1  # (1 hour)
T = 8760  # number of hours # TODO Update to 8760

# ================================
# Pre-calculations
# ================================

# Scale power production from a single 5 MW turbine to the capacity of the wind farm
E_WIND = E_WT.power.values * X_WIND / 5.0

# Move time series data to dictionaries to be compatible with pyomo indexed format
price_scale = 1.0
E_WIND_dict = {i: float(E_WIND[i - 1]) for i in range(1, T + 1)}
grid_price_dict = {i: price_scale * grid_price.system_energy_price_rt[i - 1] for i in
                   range(1, T + 1)}  # TODO Update multiplier

# ================================
# Create Pyomo model
# ================================
model = AbstractModel()
# ----------------
# Sets (fixed)
# ----------------
model.t = Set(initialize=range(1, T + 1))

# ----------------
# Parameters (fixed inputs)
# ----------------
model.E_WIND = Param(model.t, initialize=E_WIND_dict)  # Wind power generated by farm
model.P = Param(model.t, initialize=grid_price_dict)  # grid price of electricity
# ----------------
# Variables (upper case)
# ----------------
# Decision variables - OCAES system
# model.N_WELLS = Var(within=NonNegativeIntegers, initialize=1)  # Number of wells (>0, integer)
# model.X_OCAES = Var(within=NonNegativeReals, initialize=1.0)  # The machinery rating (>0, MW)

# Energy flows
model.E_CURTAIL = Var(model.t, within=NonNegativeReals)  # Curtailed energy (>0, MWh)
model.E_GRID = Var(model.t, within=NonNegativeReals)  # Grid delivered (>0, MWh)

# Economics
model.REVENUE = Var(within=Reals, initialize=0.0)  # within reservoir (>0, $)
# ----------------
# Constraints (lower case)
# ----------------
model.energy_balance = Constraint(model.t, rule=energy_balance)  # Hourly energy balance
model.power_balance = Constraint(model.t, rule=power_balance)  # Hourly energy balance
model.revenue = Constraint(rule=revenue)  # Total revenue

# ----------------
# Objective
# ----------------
model.OBJ = Objective(sense=maximize, rule=objective)

# ----------------
# Create model and solve
# ----------------
instance = model.create_instance(report_timing=True)
instance.preprocess()
opt = SolverFactory("cplex")
results = opt.solve(instance)


df = pd.DataFrame(columns=['E_WIND', 'E_CURTAIL', 'E_GRID'], index=range(T))

for i in range(T):
    df.loc[i, "E_WIND"] = value(instance.E_WIND[i + 1])
    df.loc[i, "E_CURTAIL"] = value(instance.E_CURTAIL[i + 1])
    df.loc[i, "E_GRID"] = value(instance.E_GRID[i + 1])


df.plot()
df.to_csv("output_windonly.csv")
plt.savefig('Energy_balance_windonly.png')
